geom_point() +
geom_smooth(method = lm) +
facet_wrap(~ EF, ncol = 6)
model = lm(Length ~ Year, data = Path[Path$EF == 1, ])
summary(model)
Path = Torn.df %>%
filter(Year >= 1994) %>%
group_by(EF) %>%
do(models = lm(Length ~ Year, data = .))
Path
library(scatterplot3d)
install.packages("scatterplot3d")
library(scatterplot3d)
model1 = lm(Volume ~ Girth, data = trees)
plot(trees$Volume ~ trees$Girth, pch = 16,
xlab = "Tree diameter (in)",
ylab = "Timber volume (cubic ft)")
abline(model1)
model1 = lm(Volume ~ Girth, data = trees)
plot(trees$Volume ~ trees$Girth, pch = 16,
xlab = "Tree diameter (in)",
ylab = "Timber volume (cubic ft)")
abline(model1)
model2 = lm(Volume ~ Girth + Height, data = trees)
s3d = scatterplot3d(trees, angle = 55, scale.y = .7, pch = 16,
xlab = "Tree diameter (in)",
zlab = "Timber volume (cubic ft)",
ylab = "Tree height (ft)")
s3d$plane3d(model2)
plot.new()
model2 = lm(Volume ~ Girth + Height, data = trees)
s3d = scatterplot3d(trees, angle = 55, scale.y = .7, pch = 16,
xlab = "Tree diameter (in)",
zlab = "Timber volume (cubic ft)",
ylab = "Tree height (ft)")
s3d$plane3d(model2)
install.packages("scatterplot3d")
install.packages("scatterplot3d")
library(scatterplot3d)
install.packages("scatterplot3d")
install.packages("scatterplot3d")
install.packages("scatterplot3d")
install.packages("scatterplot3d")
library(scatterplot3d)
model1 = lm(Volume ~ Girth, data = trees)
plot(trees$Volume ~ trees$Girth, pch = 16,
xlab = "Tree diameter (in)",
ylab = "Timber volume (cubic ft)")
abline(model1)
quartz()
model1 = lm(Volume ~ Girth, data = trees)
plot(trees$Volume ~ trees$Girth, pch = 16,
xlab = "Tree diameter (in)",
ylab = "Timber volume (cubic ft)")
?abline
abline(model1)
s3d = scatterplot3d(trees, angle = 32, scale.y = .7, pch = 16,
xlab = "Tree diameter (in)",
zlab = "Timber volume (cubic ft)",
ylab = "Tree height (ft)")
s3d$plane3d(model2)
PC.df = read.table("http://myweb.fsu.edu/jelsner/temp/data/PetrolConsumption.txt", header = TRUE)
library(GGally)
ggpairs(PC.df)
cor(PC.df)
library(psych)
pairs.panels(PC.df)
model1 = lm(Petrol.Consumption ~ Prop.DL + Pavement +
Avg.Inc + Petrol.Tax, data = PC.df)
model1
summary(model1)
summary(lm(Petrol.Consumption ~ Pavement + Petrol.Tax +
Avg.Inc + Prop.DL, data = PC.df))
summary(lm(Petrol.Consumption ~ I(Pavement * 20) + Petrol.Tax +
Avg.Inc + Prop.DL, data = PC.df))
model2 = lm(Petrol.Consumption ~ Prop.DL + Avg.Inc +
Petrol.Tax, data = PC.df)
summary(model2)
model3 = lm(Petrol.Consumption ~ Prop.DL + Avg.Inc,
data = PC.df)
summary(model3)
model2.df = fortify(model2)
library(ggplot2)
model2.df = fortify(model2)
ggplot(model2.df, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_smooth() +
geom_hline(yintercept = 0)
library(sm)
library(sm)
res = residuals(model2)
sm.density(res, xlab = "Model Residuals", model = "Normal")
qqnorm(model2$residuals)
qqline(model2$residuals)
qqline(model2$residuals)
?qqline
par(mar = c(0, 0, 0, 0))
qqline(model2$residuals)
hp.df = read.table("http://myweb.fsu.edu/jelsner/temp/data/houseprice.txt",
header = TRUE)
head(hp.df)
ggpairs(hp.df)
model0 = lm(price ~ sqft + custom,
data = hp.df)
summary(model0)
predict(model0, newdata = data.frame(sqft = 3500, custom = 1),
interval = "confidence")
ggplot(hp.df, aes(y = price, x = sqft, color = factor(custom))) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
xlab("Living Space (sq ft)") +
ylab("Selling Price ($100)")
ggplot(hp.df, aes(y = price, x = sqft, color = factor(corner))) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
xlab("Living Space (sq ft)") +
ylab("Selling Price ($100)")
model1 = lm(price ~ sqft + corner + sqft:corner,
data = hp.df)
summary(model1)
model1b = lm(price ~ sqft*corner,
data = hp.df)
summary(model1b)
model1c = lm(price ~ I(sqft - mean(sqft)) + corner +
I(sqft - mean(sqft)):corner,
data = hp.df)
summary(model1c)
model1d = lm(price ~ I(sqft - 1500) + corner + I(sqft - 1500):corner,
data = hp.df)
summary(model1d)
library(foreign)
library(msm)
scores.df = read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
install.packages("msm")
model1 = lm(read ~ write + socst,
data = scores.df)
summary(model1)
library(dplyr)
scores.df2 = scores.df %>%
mutate(socst2 = cut(socst, 2))
ggplot(scores.df2, aes(y = read, x = write, color = factor(socst2))) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
xlab("Writing Score") +
ylab("Reading Score")
model2 = lm(read ~ write + socst + write:socst,
data = scores.df)
summary(model2)
library(interplot)
install.packages("interplot")
library(interplot)
interplot(m = model2, var1 = "socst", var2 = "write") +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Social Economic Status") +
ylab("Coefficient on Writing Score") +
theme_bw()
L = "http://myweb.fsu.edu/jelsner/temp/data/CasualtyTornadoes.txt"
Torn.df = read.table(L, header = TRUE)
library(scales)
df = Torn.df %>%
arrange(cas)
ggplot(df, aes(x = popD, y = ED, color = log10(cas))) +
scale_color_continuous(low = 'green', high = 'red', labels = c("1", "10", "100", "1000")) +
geom_point() +
scale_x_log10(breaks = c(.01, .1, 1, 10, 100, 1000, 10000),
labels = c(".01", ".1", "1", "10", "100", "1000", "10,000")) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
xlab("Population Density [people per sq. km]") +
ylab("Energy Dissipation [W]") +
labs(color = "Tornado\nCasualties") +
theme_bw() +
theme(legend.position = c(.01, .99),
legend.justification = c(.01, .99))
df = Torn.df %>%
filter(popD > 0) %>%
mutate(lpopD = log10(popD),
lED = log10(ED),
lcas = log10(cas))
formula1 = lcas ~ lpopD + lED + lpopD:lED
model1 = lm(formula1, data = df)
interplot(m = model1, var1 = "lED", var2 = "lpopD", hist = TRUE) +
scale_x_continuous(breaks = c(-2, 0, 2, 4),
labels = c(".01", "1", "100", "10,000")) +
scale_y_continuous(breaks = pretty_breaks()) +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Population Density [people/sq. km]") +
ylab("Energy Elasticity") +
theme_minimal()
pgrid = expand.grid(lpopD = seq(-3, 3, .5),
lED = seq(7, 13.5, .5))
pre1 = predict(model1, newdata = pgrid)
pgrid$pre1 = 10^pre1
library(directlabels)
install.packages("directlabels")
library(directlabels)
library(directlabels)
p = ggplot(pgrid, aes(x = lpopD, y = lED, z = pre1)) +
geom_raster(data = pgrid, aes(fill = log10(pre1)), show.legend = FALSE) +
scale_fill_continuous(low = 'green', high = 'red') +
geom_contour(aes(color = ..level..),  breaks = c(1, 2, 5, 10, 20, 50, 100), color = "black") +
scale_x_continuous(breaks = seq(-3, 3, 2),
labels = c(".001", ".1",  "10", "1,000")) +
xlab("Population Density [people per sq. km]") +
scale_y_continuous(breaks = seq(7, 13, 2),
labels = c(".001", ".1",  "10", "1,000")) +
ylab("Energy Dissipation [GW]") +
theme_minimal()
p = ggplot(pgrid, aes(x = lpopD, y = lED, z = pre1)) +
geom_raster(data = pgrid, aes(fill = log10(pre1)), show.legend = FALSE) +
scale_fill_continuous(low = 'green', high = 'red') +
geom_contour(aes(color = ..level..),  breaks = c(1, 2, 5, 10, 20, 50, 100), color = "black") +
scale_x_continuous(breaks = seq(-3, 3, 2),
labels = c(".001", ".1",  "10", "1,000")) +
xlab("Population Density [people per sq. km]") +
scale_y_continuous(breaks = seq(7, 13, 2),
labels = c(".001", ".1",  "10", "1,000")) +
ylab("Energy Dissipation [GW]") +
theme_minimal()
direct.label(p, list("angled.boxes"))
bf.df = read.table("http://myweb.fsu.edu/jelsner/temp/data/fat.txt",
header = TRUE)
ggpairs(bf.df)
model1 = lm(bodyfat ~ abdomen + biceps + forearm + wrist,
data = bf.df)
summary(model1)
PC.df = read.table("http://myweb.fsu.edu/jelsner/temp/data/PetrolConsumption.txt", header = TRUE)
str(PC.df)
modelF = lm(Petrol.Consumption ~ Prop.DL + Pavement + Avg.Inc + Petrol.Tax,
data = PC.df)
drop1(modelF)
pollute.df = read.table("http://myweb.fsu.edu/jelsner/temp/data/pollute.txt",
header = TRUE)
head(pollute.df)
pollute.df = read.table("http://myweb.fsu.edu/jelsner/temp/data/pollute.txt",
header = TRUE)
head(pollute.df)
library(tree)
library(tree)
tr = tree(Pollution ~ .,
data = pollute.df)
text(tr)
library(tree)
tr = tree(Pollution ~ .,
data = pollute.df)
plot(tr)
text(tr)
predict(tr, newdata = data.frame(Industry = 750, Population = 0,
Wet.days = 0, Temp = 0, Wind = 0, Rain = 0))
predict(tr, newdata = data.frame(Industry = 740, Population = 180,
Wet.days = 0, Temp = 0, Wind = 0, Rain = 0))
predict(tr, newdata = data.frame(Industry = 740, Population = 200,
Wet.days = 120, Temp = 50, Wind = 8, Rain = 0))
prune.tree(tr)
plot(prune.tree(tr))
tr2 = prune.tree(tr, best = 4)
plot(tr2)
plot(tr2)
text(tr2)
tr2
predict(tr, newdata = data.frame(Industry = 750, Population = 0,
Wet.days = 0, Temp = 0, Wind = 0, Rain = 0))
predict(tr, newdata = data.frame(Industry = 750, Population = 0,
Wet.days = 1, Temp = 0, Wind = 0, Rain = 0))
predict(tr, newdata = data.frame(Industry = 750, Population = 0,
Wet.days = 4, Temp = 0, Wind = 0, Rain = 0))
predict(tr, newdata = data.frame(Industry = 740, Population = 180,
Wet.days = 0, Temp = 0, Wind = 0, Rain = 0))
predict(tr, newdata = data.frame(Industry = 740, Population = 170,
Wet.days = 0, Temp = 0, Wind = 0, Rain = 0))
df = read.table("http://myweb.fsu.edu/jelsner/temp/data/AnnualData.txt",
header = TRUE) %>%
filter(Year >= 1950) %>%
select(Year = Year, H = B.1, SOI = soi, SST = sst)
library(dplyr)
library(dplyr)
df = read.table("http://myweb.fsu.edu/jelsner/temp/data/AnnualData.txt",
header = TRUE) %>%
filter(Year >= 1950) %>%
select(Year = Year, H = B.1, SOI = soi, SST = sst)
head(df)
library(tree)
tr = tree(H ~ SOI + SST,
data = df)
plot(tr)
text(tr)
predict(tr, newdata = data.frame(SOI = -2, SST = .2))
tr2 = tree(H ~ SOI + SST,
data = df[-61, ])
predict(tr2, newdata = data.frame(SOI = -2, SST = .2))
library(randomForest)
rf = randomForest(H ~ SOI + SST,
data = df)
predict(rf, newdata = data.frame(SOI = -2, SST = .2))
rf = randomForest(H ~ SOI + SST,
data = df[-61, ])
predict(rf, newdata = data.frame(SOI = -2, SST = .2))
n = length(df$H)
prx = numeric(n)
for(i in 1:n){
rfm = randomForest(H ~ SOI + SST, data = df[-i, ])
prm = glm(H ~ SOI + SST, data = df[-i, ],
family = "poisson")
new = df[i, ]
rfx[i] = predict(rfm, newdata = new)
prx[i] = predict(prm, newdata = new,
type = "response")
}
n = length(df$H)
rfx = numeric(n)
n = length(df$H)
rfx = numeric(n)
prx = numeric(n)
for(i in 1:n){
rfm = randomForest(H ~ SOI + SST, data = df[-i, ])
prm = glm(H ~ SOI + SST, data = df[-i, ],
family = "poisson")
new = df[i, ]
rfx[i] = predict(rfm, newdata = new)
prx[i] = predict(prm, newdata = new,
type = "response")
}
mean((df$H - prx)^2)
mean((df$H - rfx)^2)
newdat = expand.grid(SST = seq(-.5, .7, .01),
SOI = seq(-5, 4, .1))
z1 = predict(rf, newdata = newdat)
prm = glm(H ~ SOI + SST, data = df, family = "poisson")
z2 = predict(prm, newdata = newdat, type = "response")
newdat$Hrf = z1
newdat$Hpr = z2
suppressPackageStartupMessages(library(lattice))
suppressPackageStartupMessages(library(colorRamps))
suppressPackageStartupMessages(library(grid))
cr = blue2green(20)
p1 = levelplot(Hrf ~ SST + SOI, data = newdat,
at = seq(2, 12, 2),
scales = list(tck = .5, alternating = 2, cex = .7),
xlab.top=textGrob("SST [C]", gp=gpar(cex=.8)),
ylab.right=textGrob("SOI [s.d.]", gp=gpar(cex=.8),
rot=90),
xlab="", ylab="",
col.regions=cr,
colorkey=list(space="bottom", cex=.7),
sub=list("Hurricane count", cex=.9, font=1))
install.packages("lattice")
install.packages("colorRamps")
install.packages("grid")
newdat = expand.grid(SST = seq(-.5, .7, .01),
SOI = seq(-5, 4, .1))
z1 = predict(rf, newdata = newdat)
prm = glm(H ~ SOI + SST, data = df, family = "poisson")
z2 = predict(prm, newdata = newdat, type = "response")
newdat$Hrf = z1
newdat$Hpr = z2
suppressPackageStartupMessages(library(lattice))
suppressPackageStartupMessages(library(colorRamps))
suppressPackageStartupMessages(library(grid))
cr = blue2green(20)
p1 = levelplot(Hrf ~ SST + SOI, data = newdat,
at = seq(2, 12, 2),
scales = list(tck = .5, alternating = 2, cex = .7),
xlab.top=textGrob("SST [C]", gp=gpar(cex=.8)),
ylab.right=textGrob("SOI [s.d.]", gp=gpar(cex=.8),
rot=90),
xlab="", ylab="",
col.regions=cr,
colorkey=list(space="bottom", cex=.7),
sub=list("Hurricane count", cex=.9, font=1))
p2 = levelplot(Hpr ~ SST + SOI, data=newdat,
at=seq(2, 12, 2),
scales=list(tck=.5, alternating=2, cex=.7),
xlab.top=textGrob("SST [C]", gp=gpar(cex=.8)),
ylab.right=textGrob("SOI [s.d.]", gp=gpar(cex=.8),
rot=90),
xlab="", ylab="",
col.regions=cr,
colorkey=list(space="bottom", cex=.7),
sub=list("Hurricane count", cex=.9, font=1))
p1 = update(p1, main=textGrob("a", x=unit(.05, "npc")))
p2 = update(p2, main=textGrob("b", x=unit(.05, "npc")))
print(p1, split=c(1, 1, 2, 1), more=TRUE)
print(p2, split=c(2 ,1, 2, 1), more=FALSE)
print(p1, split=c(1, 1, 2, 1), more=TRUE)
print(p2, split=c(2 ,1, 2, 1), more=FALSE)
data(iris)
str(iris)
ct = tree(Species ~ ., iris)
summary(ct)
plot(ct)
text(ct, cex = .9)
plot(ct)
text(ct, cex = .9)
predict(ct, newdata = data.frame(Sepal.Length = 6,
Sepal.Width = 3,
Petal.Length = 5,
Petal.Width = 3))
predict(ct, newdata = data.frame(Sepal.Length = 5,
Sepal.Width = 2,
Petal.Length = 4,
Petal.Width = 1))
mean(rbinom(n = 100, size = 1, prob = .5))
mean(rbinom(n = 100, size = 1, prob = .9))
Temperature = c(66, 70, 69, 68, 67, 72, 73, 70, 57, 63, 70, 78, 67, 53, 67, 75, 70, 81, 76, 79, 75, 76, 58)
Damage = c(0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1)
library(ggplot2)
library(ggplot2)
df = data.frame(Damage, Temperature)
ggplot(df, aes(x = Temperature, y = Damage)) +
geom_point() +
geom_smooth(method = lm)
lrm = lm(Damage ~ Temperature, data = df)
summary(lrm)
predict(lrm, data.frame(Temperature = c(77, 65, 51))) * 100
predict(lrm, data.frame(Temperature = c(85, 45))) * 100
lrm.df = fortify(lrm)
ggplot(lrm.df, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0)
curve(1/(1 + exp(-x)),
from = -6, to = 6,
col = "red", ylab = "f(z)", xlab = "z")
abline(h = 1, lty = 2)
curve(1/(1 + exp(-x)),
from = -6, to = 6,
col = "red", ylab = "f(z)", xlab = "z")
abline(h = 1, lty = 2)
abline(h = 0, lty = 2)
DP.df = read.table("http://myweb.fsu.edu/jelsner/temp/data/DonnerParty.txt",
header = TRUE)
head(DP.df)
table(DP.df$Sex)
table(DP.df$Survival)
mean(DP.df$Age)
ggplot(DP.df, aes(x = Survival, y = Age)) +
geom_boxplot()
table(DP.df$Sex, DP.df$Survival)
logrm = glm(Survival ~ Age + Sex, data = DP.df,
family = binomial)
summary(logrm)
pchisq(10.571, 2, lower.tail = FALSE)
logrm$fitted
predict(logrm, data.frame(Age = 50, Sex = factor("male")),
type = "response")
DP.df$Survival2 = as.integer(DP.df$Survival) - 1
lfit = loess(DP.df$Survival2 ~ DP.df$Age)
DP.df$lgpred = log(predict(lfit)/(1 - predict(lfit)))
ggplot(DP.df, aes(x = Age, y = lgpred)) +
geom_point() +
geom_smooth(method = lm)
```{r}
primary_dir=paste("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/SEV_IndexGLM",sep="")
library(dplyr)
library(lme4)
dat=read.csv("vulnerability_covariates.csv")
primary_dir=paste("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/SEV_IndexGLM",sep="")
setwd(primary_dir)
dat=read.csv("vulnerability_covariates.csv")
dat=read.csv("vulnerability_covariates.csv")
dat=read.csv("vulnerability_covariates.csv")
primary_dir=paste("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/SEV_IndexGLM",sep="")
setwd(primary_dir)
dat=read.csv("vulnerability_covariates.csv")
primary_dir
setwd("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio")
primary_dir=paste("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio",sep="")
setwd(primary_dir)
primary_dir=paste("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio",sep="")
setwd(primary_dir)
C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio
primary_dir
primary_dir=paste("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio/",sep="")
setwd(primary_dir)
getwd()
library(dplyr)
library(lme4)
dat=read.csv("vulnerability_covariates.csv")
primary_dir=paste("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio",sep="")
setwd(primary_dir)
setwd("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio")
primary_dir=paste("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio")
setwd(primary_dir)
knitr::opts_chunk$set(echo = TRUE)
opts_chunk$set(root.dir = "C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio")
knitr::opts_chunk$set(echo = TRUE)
opts_chunk$set(root.dir = 'C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = 'C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio')
dat=read.csv("vulnerability_covariates.csv")
ls()
list.files
list.files()
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = 'C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio')
library(dplyr)
library(lme4)
getwd()
dat=read.csv("")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = 'C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio')
getwd()
dat=read.csv("")
setwd("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio")
dat=read.csv("")
list.files
list.files()
setwd("C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/tmp')
# knitr::opts_chunk$set(root.dir = 'C:/Users/jennm/Dropbox/PROJECTS/SocioEcological_Vulnerability_of_Caribbean/Caribbean_Climate_Vulnerability_Analyses_RStudio')
getwd()
